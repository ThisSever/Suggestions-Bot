const { SlashCommandBuilder, ButtonBuilder, EmbedBuilder, ActionRowBuilder, ButtonStyle, ModalBuilder, TextInputBuilder, TextInputStyle, StringSelectMenuBuilder, StringSelectMenuOptionBuilder, ChatInputCommandInteraction } = require('discord.js');
const EditSuggestion = require('../class/editSuggestion');
const VoteSuggestion = require('../class/voteSuggestion');

async function addButtonCallback(client, interaction) {
    const modal = new ModalBuilder()
        .setCustomId('createSuggestion')
        .setTitle('–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞');
    const titleInput = new TextInputBuilder()
        .setCustomId('title')
        .setLabel('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ–ø—Ä–æ—Å–∞')
        .setMaxLength(128)
        .setPlaceholder('–ü—Ä–∏–º–µ—Ä: –ë—É–¥—É –ª–∏ —è –≤ –∫–æ–º–∞–Ω–¥–µ Gerstlix?')
        .setRequired(true)
        .setStyle(TextInputStyle.Short);
    const row = new ActionRowBuilder().addComponents(titleInput);
    modal.addComponents(row);
    await interaction.showModal(modal);
}

async function sendSelectSuggestionCallback(client, interaction) {
    const [usersSuggestions] = await client.mysql.query(
        `SELECT id, title FROM suggestions WHERE owner = "${interaction.user.id}" AND ended = 0`,
    );
    if (usersSuggestions.length === 0) {
        return interaction.reply({ content: '–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã', ephemeral: true });
    }
    const select = new StringSelectMenuBuilder()
        .setCustomId(interaction.component.customId + 'Select')
        .setPlaceholder('–û–ø—Ä–æ—Å')
        .setMinValues(1)
        .setMaxValues(1);
    for (const suggestion of usersSuggestions) {
        select.addOptions(
            new StringSelectMenuOptionBuilder()
                .setLabel(suggestion.title)
                .setValue(`${suggestion.id}`),
        );
    }
    const row = new ActionRowBuilder().addComponents(select);
    await interaction.message.edit({ components: [row] });
    await interaction.reply({ content: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –æ–ø—Ä–æ—Å', ephemeral: true });
}

async function editButtonSelectCallback(client, interaction) {
    const [suggestion] = await client.mysql.query(
        `SELECT title, endTime, endVotes, answersList, type FROM suggestions WHERE id = ${interaction.values[0]}`,
    );
    const answersIds = suggestion[0].answersList.split(',').map(Number);
    const answers = {};
    for (const answerId of answersIds) {
        const [answerInfo] = await client.mysql.query(
            `SELECT text FROM answers WHERE id = ${answerId}`,
        );
        answers[answerInfo[0].text] = { id: answerId };
    }
    const suggestionClass = new EditSuggestion(
        suggestion[0].title, false,
        suggestion[0].type, answers,
        suggestion[0].endTime, suggestion[0].endVotes, interaction.values[0],
    );
    client.editSuggestion.set(interaction.message.id, suggestionClass);
    await suggestionClass.showInfo(client, interaction);
}

async function deleteButtonSelectCallback(client, interaction) {
    const [suggestion] = await client.mysql.query(
        `SELECT answersList FROM suggestions WHERE id = ${interaction.values[0]} AND ended = 0`,
    );
    await client.mysql.query(
        `DELETE FROM suggestions WHERE id = ${interaction.values[0]}`,
    );
    await command.execute(client, interaction);
    await interaction.reply({ content: '–û–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω!', ephemeral: true });
    const answersIds = suggestion[0].answersList.split(',').map(Number);
    for (const answerId of answersIds) {
        await client.mysql.query(
            `DELETE FROM answers WHERE id = ${answerId}`,
        );
    }
}

async function createSuggestionCallback(client, interaction) {
    const newSuggestion = new EditSuggestion(interaction.fields.getTextInputValue('title'), true);
    client.editSuggestion.set(interaction.message.id, newSuggestion);
    await newSuggestion.showInfo(client, interaction);
}

async function chooseSuggestionCallback(client, interaction) {
    const select = new StringSelectMenuBuilder()
        .setCustomId('VSchooseSuggestion')
        .setPlaceholder('–û–ø—Ä–æ—Å')
        .setMinValues(1)
        .setMaxValues(1);
    const selectOptions = await VoteSuggestion.buildSelectOptions(client, interaction, 0);
    select.addOptions(selectOptions);
    const row = new ActionRowBuilder().addComponents(select);
    await interaction.message.edit({ components: [row] });
    await interaction.reply({ content: '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –æ–ø—Ä–æ—Å', ephemeral: true });
}

const command = {
    data: new SlashCommandBuilder()
        .setName('–æ–ø—Ä–æ—Å—ã')
        .setDescription('–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –æ–ø—Ä–æ—Å–æ–≤'),
    async execute(client, interaction) {
        if (interaction instanceof ChatInputCommandInteraction) await interaction.deferReply();
        const [allSuggestionesCount] = await client.mysql.query(
            'SELECT COUNT(*) AS count FROM suggestions',
        );
        const [activeSuggestionesCount] = await client.mysql.query(
            'SELECT COUNT(*) AS count FROM suggestions WHERE ended = 0',
        );
        let embedDescription = '–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –æ–ø—Ä–æ—Å–æ–≤. ' +
            '–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω—É–∂–Ω—É—é –í–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø—Ä–æ—Å–∞—Ö, ' +
            '–¥–æ–±–∞–≤–∏—Ç—å, –∏–∑–º–µ–Ω–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –æ–ø—Ä–æ—Å. –¢–∞–∫ –∂–µ –Ω–µ ' +
            '–∑–∞–±—ã–≤–∞–π—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á—É–∂–∏—Ö –æ–ø—Ä–æ—Å–∞—Ö.\n';
        const [lastSuggestion] = await client.mysql.query(
            'SELECT title FROM suggestions WHERE id = (SELECT MAX(id) FROM suggestions)',
        );
        if (lastSuggestion.length !== 0) {
            embedDescription += `**–ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –æ–ø—Ä–æ—Å**:\n- ${lastSuggestion[0].title}`;
        }
        const embed = new EmbedBuilder()
            .setTitle('–ú–µ–Ω—é –æ–ø—Ä–æ—Å–æ–≤')
            .setDescription(embedDescription)
            .setColor(8847452)
            .addFields(
                { name: '–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤', value: `${allSuggestionesCount[0].count} –æ–ø—Ä–æ—Å–æ–≤`, inline: true },
                { name: '–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤', value: `${activeSuggestionesCount[0].count} –æ–ø—Ä–æ—Å–æ–≤`, inline: true },
            );
        const addButton = new ButtonBuilder()
            .setCustomId('addButton')
            .setLabel('–î–æ–±–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å')
            .setStyle(ButtonStyle.Success)
            .setEmoji('‚ûï');
        const editButton = new ButtonBuilder()
            .setCustomId('editButton')
            .setLabel('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å')
            .setStyle(ButtonStyle.Primary)
            .setEmoji('üîÑ');
        const deleteButton = new ButtonBuilder()
            .setCustomId('deleteButton')
            .setLabel('–£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å')
            .setStyle(ButtonStyle.Danger)
            .setEmoji('‚ûñ');
        const firstRow = new ActionRowBuilder().addComponents(addButton, editButton, deleteButton);
        const chooseSuggestion = new ButtonBuilder()
            .setCustomId('chooseSuggestion')
            .setLabel('–í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å')
            .setStyle(ButtonStyle.Secondary);
        const secondRow = new ActionRowBuilder().addComponents(chooseSuggestion);
        if (interaction instanceof ChatInputCommandInteraction) {
            await interaction.followUp({ embeds: [embed], components: [firstRow, secondRow] });
        } else {
            await interaction.message.edit({ embeds: [embed], components: [firstRow, secondRow] });
        }
    },
    buttons: {
        addButton: addButtonCallback,
        editButton: sendSelectSuggestionCallback,
        deleteButton: sendSelectSuggestionCallback,
        chooseSuggestion: chooseSuggestionCallback,
    },
    modals: {
        createSuggestion: createSuggestionCallback,
    },
    selects: {
        editButtonSelect: editButtonSelectCallback,
        deleteButtonSelect: deleteButtonSelectCallback,
    },
};

module.exports = command;